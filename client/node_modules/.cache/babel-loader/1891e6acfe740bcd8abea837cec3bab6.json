{"ast":null,"code":"import { COMPLETE_ALL, COMPLETE_TASK, CREATE_TASK, REMOVE_TASK } from \"../actions/actions\";\nexport const todolist = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case CREATE_TASK:\n      {\n        const {\n          data\n        } = payload; //Ignore empty string entries\n\n        if (!data) {\n          return state;\n        }\n\n        const newItem = {\n          data,\n          isComplete: false\n        }; //TODO -- would possibly make more sense to put this at the front of the list\n\n        return state.concat(newItem);\n      }\n\n    case REMOVE_TASK:\n      {\n        const {\n          data\n        } = payload;\n        const filteredState = state.filter(item => item.data !== data);\n        return filteredState;\n      }\n\n    case COMPLETE_TASK:\n      {\n        const {\n          data\n        } = payload;\n        return state.map(item => {\n          if (item.data === data) {\n            return { ...item,\n              isComplete: true\n            };\n          }\n\n          return item;\n        });\n      }\n\n    case COMPLETE_ALL:\n      {\n        return state.map(item => {\n          if (!item.isComplete) {\n            return { ...item,\n              isComplete: true\n            };\n          }\n\n          return item;\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/dtnewton/Development/react-todo-c/src/todolist/reducers/reducers.js"],"names":["COMPLETE_ALL","COMPLETE_TASK","CREATE_TASK","REMOVE_TASK","todolist","state","action","type","payload","data","newItem","isComplete","concat","filteredState","filter","item","map"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,WAAtC,EAAmDC,WAAnD,QAAsE,oBAAtE;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;AAC5C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACI,SAAKL,WAAL;AAAkB;AACd,cAAM;AAAEO,UAAAA;AAAF,YAAWD,OAAjB,CADc,CAEd;;AACA,YAAG,CAACC,IAAJ,EAAU;AACN,iBAAOJ,KAAP;AACH;;AACD,cAAMK,OAAO,GAAG;AACZD,UAAAA,IADY;AAEZE,UAAAA,UAAU,EAAE;AAFA,SAAhB,CANc,CAUd;;AACA,eAAON,KAAK,CAACO,MAAN,CAAaF,OAAb,CAAP;AACH;;AACD,SAAKP,WAAL;AAAkB;AACd,cAAM;AAAEM,UAAAA;AAAF,YAAWD,OAAjB;AACA,cAAMK,aAAa,GAAGR,KAAK,CAACS,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACN,IAAL,KAAcA,IAAnC,CAAtB;AAEA,eAAOI,aAAP;AACH;;AACD,SAAKZ,aAAL;AAAoB;AAChB,cAAM;AAAEQ,UAAAA;AAAF,YAAWD,OAAjB;AACA,eAAOH,KAAK,CAACW,GAAN,CAAUD,IAAI,IAAI;AACrB,cAAIA,IAAI,CAACN,IAAL,KAAcA,IAAlB,EAAwB;AACpB,mBAAO,EAAC,GAAGM,IAAJ;AAAUJ,cAAAA,UAAU,EAAE;AAAtB,aAAP;AACH;;AACD,iBAAOI,IAAP;AACH,SALM,CAAP;AAMH;;AACD,SAAKf,YAAL;AAAmB;AACf,eAAOK,KAAK,CAACW,GAAN,CAAUD,IAAI,IAAI;AACrB,cAAI,CAACA,IAAI,CAACJ,UAAV,EAAsB;AAClB,mBAAO,EAAC,GAAGI,IAAJ;AAAUJ,cAAAA,UAAU,EAAE;AAAtB,aAAP;AACH;;AACD,iBAAOI,IAAP;AACH,SALM,CAAP;AAMH;;AACD;AACI,aAAOV,KAAP;AAtCR;AAwCH,CA3CM","sourcesContent":["import { COMPLETE_ALL, COMPLETE_TASK, CREATE_TASK, REMOVE_TASK } from \"../actions/actions\";\n\nexport const todolist = (state = [], action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n        case CREATE_TASK: {\n            const { data } = payload;\n            //Ignore empty string entries\n            if(!data) {\n                return state;\n            }\n            const newItem = {\n                data,\n                isComplete: false\n            };\n            //TODO -- would possibly make more sense to put this at the front of the list\n            return state.concat(newItem);\n        }\n        case REMOVE_TASK: {\n            const { data } = payload;\n            const filteredState = state.filter(item => item.data !== data);\n\n            return filteredState;\n        }\n        case COMPLETE_TASK: {\n            const { data } = payload;\n            return state.map(item => {\n                if (item.data === data) {\n                    return {...item, isComplete: true};\n                }\n                return item;\n            });\n        }\n        case COMPLETE_ALL: {\n            return state.map(item => {\n                if (!item.isComplete) {\n                    return {...item, isComplete: true}\n                }\n                return item;\n            })\n        }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}